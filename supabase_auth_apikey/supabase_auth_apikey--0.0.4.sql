/*
 * MIT License
 *
 * Copyright (c) 2023 Martin Donadieu: https://github.com/Capgo-go/pg-extensions/
 * 
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

CREATE TYPE "public"."key_permission" AS ENUM (
    'read',
    'write'
);

CREATE TABLE "public"."apikeys" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid" NOT NULL,
    "key" character varying NOT NULL,
    "permission" "public"."key_permission" NOT NULL
);

ALTER TABLE "public"."apikeys" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."apikeys_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."apikeys"
    ADD CONSTRAINT "apikeys_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."apikeys"
    ADD CONSTRAINT "apikeys_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE "public"."apikeys" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable all for user based on user_id"
ON "public"."apikeys"
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);


CREATE OR REPLACE FUNCTION "public"."is_allowed_apikey"("apikey" "text", "permission" "public"."key_permission"[]) RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
Begin
  RETURN (SELECT EXISTS (SELECT 1
  FROM apikeys
  WHERE key=((current_setting('request.headers'::text, true))::json ->> 'capgkey'::text)
  AND permission=ANY(permission)));
End;  
$$;

CREATE OR REPLACE FUNCTION "public"."create_apikey"("user_id" "uuid", "permission" "public"."key_permission") RETURNS "public"."apikeys"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
    new_apikey "public"."apikeys";
BEGIN
    INSERT INTO apikeys ("user_id", "key", "permission")
    VALUES (user_id, md5(random()::text || clock_timestamp()::text)::uuid, permission)
    RETURNING * INTO new_apikey;
    
    RETURN new_apikey;
END;
$$;

CREATE OR REPLACE FUNCTION "public"."create_apikey"("permission" "public"."key_permission") RETURNS "public"."apikeys"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    new_apikey "public"."apikeys";
BEGIN
    RETURN create_apikey(auth.uid(), permission);
END;
$$;


CREATE OR REPLACE FUNCTION "public"."delete_apikey"("apikey" "text") RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
    DELETE FROM apikeys WHERE key=apikey;
    RETURN true;
END;
$$;

CREATE OR REPLACE FUNCTION "public"."get_user_id"("apikey" "text") RETURNS "uuid"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE  
    is_found uuid;
BEGIN
    SELECT user_id
    INTO is_found
    FROM apikeys
    WHERE key=apikey;
    RETURN is_found;
END;  
$$;
